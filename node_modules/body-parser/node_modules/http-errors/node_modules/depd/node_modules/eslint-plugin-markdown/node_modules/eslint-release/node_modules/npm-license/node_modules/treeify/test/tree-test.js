var treeify = require('../treeify'),
   vows = require('vows'),
   assert = require('assert'),
   events = require('events');

// - helper functions -----------------

function treeifyByLineGuts(args) {
   var emitter = new events.EventEmitter(),
       lineNum = 0;
   args.push(function(line) {
      emitter.emit('success', line);
      emitter.emit('line ' + (++lineNum), line);
   });
   treeify.asLines.apply(this, args);
   return emitter;
}

function treeifyByLine(obj) {
   return function(showValues) {
      var arguments = [ obj, showValues ];
      return treeifyByLineGuts(arguments);
   };
}

function treeifyByLineWithHideFunctionsArgument(obj) {
   return function(showValues, hideFunctions) {
      var arguments = [ obj, showValues, hideFunctions ];
      return treeifyByLineGuts(arguments);
   };
}

function treeifyEntirely(obj) {
   return function(showValues, hideFunctions) {
      return treeify.asTree(obj, showValues, hideFunctions);
   };
}

function withValuesShown(showValues) {
   return function(func){ return func(showValues, false) };
}

function withValuesShownFunctionsHidden() {
  return function(func){ return func(true, true) };

}

function is(content, arrayIndex) {
   return function(lines) {
      var toCheck = lines;
      if (arrayIndex !== undefined) {
         toCheck = lines[arrayIndex];
      }
      assert.strictEqual(toCheck, content, 'should be "' + content + '" but was "' + toCheck + '"');
   };
}

function checkLines(/* ... */) {
   var ret = {}, entry;
   for (var line = 1; line <= arguments.length; line++) {
      if ( ! arguments[line - 1])
         continue;
      entry = {};
      entry['branches correctly on line '+line] = is(arguments[line - 1]);
      ret['line '+line] = entry;
   }
   return ret;
}

// - the beautiful test suite ---------

vows.describe('tree-test').addBatch({

   'A tree created from an empty object': {
      topic: {},

      'when returned as a whole tree': {
         topic: treeifyEntirely,

         'with values hidden': {
            topic: withValuesShown(false),
            'is an empty string': is('')
         },
         'with values shown': {
            topic: withValuesShown(true),
            'is an empty string': is('')
         }
      }
   },

   'A tree created from a single-level object': {
      topic: {
         apples: 'gala',      //  ├─ apples: gala
         oranges: 'mandarin'  //  └─ oranges: mandarin
      },

      'when returned line-by-line': {
         topic: treeifyByLine,

         'with values hidden': {
        