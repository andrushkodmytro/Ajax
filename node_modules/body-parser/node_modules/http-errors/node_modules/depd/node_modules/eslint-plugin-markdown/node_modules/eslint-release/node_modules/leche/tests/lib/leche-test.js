/**
 * @fileoverview Tests for Leche
 * @author nzakas
 */

/* global describe, it, afterEach, sinon, assert */

'use strict';

//------------------------------------------------------------------------------
// Requirements
//------------------------------------------------------------------------------

var leche = require('../../lib/leche');

//------------------------------------------------------------------------------
// Private
//------------------------------------------------------------------------------

// constants
var TEST_PREFIX = 'with ';

// variables
var withData = leche.withData;

//------------------------------------------------------------------------------
// Public
//------------------------------------------------------------------------------

describe('leche', function() {

	var sandbox = sinon.sandbox.create();

	afterEach(function() {
		sandbox.verifyAndRestore();
	});

	describe('create()', function() {

		it('should create an object with the specified methods', function() {

			var object = leche.create(['method1', 'method2']);

			assert.isTrue(object.hasOwnProperty('method1'));
			assert.isTrue(object.hasOwnProperty('method2'));
			assert.equal(typeof object.method1, 'function');
			assert.equal(typeof object.method2, 'function');
		});

		it('should create an object with methods that do nothing', function() {

			var object = leche.create(['method1', 'method2']);

			assert.doesNotThrow(function() {
				object.method1();
			});

			assert.doesNotThrow(function() {
				object.method2();
			});

		});

	});

	describe('fake()', function() {

		it('should create an object whose prototype is the template when called', function() {
			var template = {};
			var fake = leche.fake(template);

			assert.isTrue(template.isPrototypeOf(fake));
		});

		it('should create an object whose methods throw an error when called on an object with own methods only', function() {

			var template = {
				method: function() {
					return true;
				}
			};

			var fake = leche.fake(template);
			assert.throws(function() {
				fake.method();
			}, /Unexpected call to method "method"\./);
		});

		it('should create an object whose prototype methods throw an error when called on an object with prototype methods', function() {

			var template = {
				method: function() {
					return true;
				}
			};

			var fake = leche.fake(Object.create(template));
			assert.throws(function() {
				fake.method();
			}, /Unexpected call to method "method"\./);
		});

		it('should create an object whose properties throw an error when accessed', function() {

			var template = {
				name: 'leche'
			};

			var fake = leche.fake(template);
			assert.throws(function() {
				// calls getter
				fake.name; // eslint-disable-line no-unused-expressions
			}, /Unexpected use of property "name"\./);

		});

		it('should create an object whose properties do not throw an error when set to a value', function() {

			var template = {
				name: 'leche'
			};

			var fake = leche.fake(template);
			fake.name = 'box';

			assert.equal(fake.n