/**
 * @fileoverview Disallows or enforces spaces inside of object literals.
 * @author Jamund Ferguson
 * @copyright 2014 Vignesh Anand. All rights reserved.
 * @copyright 2015 Jamund Ferguson. All rights reserved.
 */
'use strict'

// ------------------------------------------------------------------------------
// Requirements
// ------------------------------------------------------------------------------

var RuleTester = require('eslint').RuleTester
var rule = require('../rules/object-curly-even-spacing')
var parserOptions = { ecmaVersion: 6, sourceType: 'module' }

// ------------------------------------------------------------------------------
// Tests
// ------------------------------------------------------------------------------

var ruleTester = new RuleTester()
ruleTester.run('object-curly-even-spacing', rule, {
  valid: [

    // either
    { code: "var x = { a: 'b' }", options: ['either'] },
    { code: "var x = {\na: 'b'\n}", options: ['either'] },
    { code: "var x = {\n\ta: 'b'\n}", options: ['either'] },
    { code: "var x = {\n a: 'b' \n}", options: ['either'] },
    { code: 'var foo = {};', options: ['either'] },
    { code: 'var {x} = y', options: ['either'], parserOptions: parserOptions },
    { code: 'var {} = y', options: ['either'], parserOptions: parserOptions },
    { code: 'var { x } = y', options: ['either'], parserOptions: parserOptions },
    { code: 'var {\nx\n} = y', options: ['either'], parserOptions: parserOptions },
    { code: 'var {\n\tx\n} = y', options: ['either'], parserOptions: parserOptions },
    { code: "import {x} from 'y'", options: ['either'], parserOptions: parserOptions },

    // always - object literals
    { code: 'var obj = { foo: bar, baz: qux };', options: ['always'] },
    { code: 'var obj = { foo: { bar: quxx }, baz: qux };', options: ['always'] },
    { code: 'var obj = {\nfoo: bar,\nbaz: qux\n};', options: ['always'] },

    // always - destructuring
    { code: 'var { x } = y', options: ['always'], parserOptions: { ecmaVersion: 6 } },
    { code: 'var { x, y } = y', options: ['always'], parserOptions: { ecmaVersion: 6 } },
    { code: 'var { x,y } = y', options: ['always'], parserOptions: { ecmaVersion: 6 } },
    { code: 'var {\nx,y } = y', options: ['always'], parserOptions: { ecmaVersion: 6 } },
    { code: 'var {\nx,y\n} = z', options: ['always'], parserOptions: { ecmaVersion: 6 } },
    { code: 'var { x = 10, y } = y', options: ['always'], parserOptions: { ecmaVersion: 6 } },
    { code: 'var { x: { z }, y } = y', options: ['always'], parserOptions: { ecmaVersion: 6 } },
    { code: 'var {\ny,\n} = x', options: ['always'], parserOptions: { ecmaVersion: 6 } },
    { code: 'var { y, } = x', options: ['always'], parserOptions: { ecmaVersion: 6 } },
    { code: 'var {} = x', options: ['always'], parserOptions: { ecmaVersion: 6 } },

    // always - import / export
    { code: "import { door } from 'room'", options: ['always'], parserOptions: parserOptions },
    { code: "import {\ndoor } from 'room'", options: ['always'], parserOptions: parserOptions },
    { code: "export { door } from 'room'", options: ['always'], parserOptions: parserOptions },
    { code: "import { house, mouse } from 'caravan'", options: ['always'], parserOptions: parserOptions },
    { code: 'export { door }', options: ['always'], parserOptions: parserOptions },
    { code: "import {} from 'room'", options: ['always'], parserOptions: parserOptions },
    { code: "export {} from 'room'", options: ['always'], parserOptions: parserOptions },
    { code: "import 'room'", options: ['always'], parserOptions: parserOptions },

    // always - empty object
    { code: 'var foo = {};', options: ['always'] },

    // always - objectsInObjects
    { code: "var obj = { 'foo': { 'bar': 1, 'baz': 2 }};", options: ['always', {'objectsInObjects': false}] },

    // always - arraysInObjects
    { code: "var obj = { 'foo': [ 1, 2 ]};", options: ['always', {'arraysInObjects': false}] },

    // always - arraysInObjects, objectsInObjects
    { code: "var obj = { 'qux': [ 1, 2 ], 'foo': { 'bar': 1, 'baz': 2 }};", options: ['always', {'arraysInObjects': false, 'objectsInObjects': false}] },

    // always - arraysInObjects, objectsInObjects (reverse)
    { code: "var obj = { 'foo': { 'bar': 1, 'baz': 2 }, 'qux': [ 1, 2 ]};", options: ['always', {'arraysInObjects': false, 'objectsInObjects': false}] },

    // never
    { code: 'var obj = {foo: bar,\nbaz: qux\n};', options: ['never'] },
    { code: 'var obj = {\nfoo: bar,\nbaz: qux};', options: ['never'] },

    // never - object literals
    { code: 'var o